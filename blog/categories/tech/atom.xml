<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Gao Zhiguo's Blog]]></title>
  <link href="http://zgao4.github.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://zgao4.github.com/"/>
  <updated>2013-05-17T11:17:12+08:00</updated>
  <id>http://zgao4.github.com/</id>
  <author>
    <name><![CDATA[Gao Zhiguo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[郁闷啊，太土鳖了]]></title>
    <link href="http://zgao4.github.com/blog/2013/05/17/yu-men-a-%2Ctai-tu-bie-liao/"/>
    <updated>2013-05-17T11:11:00+08:00</updated>
    <id>http://zgao4.github.com/blog/2013/05/17/yu-men-a-,tai-tu-bie-liao</id>
    <content type="html"><![CDATA[<h2>现象</h2>

<p>doubango/idoubs升级了，添加了opus库，本来是好事，结果更新后死活编译不过了，总是报找不到opus相应的源文件。</p>

<h2>过程</h2>

<p>疯狂的找，发现opus.c那个文件在<code>ls -l@</code>时多了一个@，貌似是什么扩展属性，然后用emacs打开里面每行末尾都有<sup>M</sup>，以为是这个原因，使用dos2unix转换了之后还是不行，反正折腾来折腾去怎么都不行。</p>

<h2>解决</h2>

<p>太土鳖了，原来idoubs默认是找videoChat这目录底下的doubango，我的videoChat/mydoubs/doubango更新了，而上一级目录的doubango没有更新。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress]]></title>
    <link href="http://zgao4.github.com/blog/2013/05/15/shi-yong-octopress/"/>
    <updated>2013-05-15T20:00:00+08:00</updated>
    <id>http://zgao4.github.com/blog/2013/05/15/shi-yong-octopress</id>
    <content type="html"><![CDATA[<p>使用Octopress的第一篇blog</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转载：第一篇博客: 用octopress搭建博客系统]]></title>
    <link href="http://zgao4.github.com/blog/2012/12/16/first-blog/"/>
    <updated>2012-12-16T04:15:00+08:00</updated>
    <id>http://zgao4.github.com/blog/2012/12/16/first-blog</id>
    <content type="html"><![CDATA[<h2>引子</h2>

<p>夜夜哭闹的混世小魔王在她满月的这天好像突然换了个人，一觉又一觉地睡。这可苦了我，一个月来建立的夜间作息倾刻间紊乱，她没有闹觉的时间里，我却丢了魂一样，怎么也睡不着。于是起身想折腾点什么，无意间看到了derbyjs的 <a href="http://blog.derbyjs.com" title="Derby JS">blog</a> 是github pages支持的，遂产生了兴趣，挽起袖子就开始折腾一个自己的。虽然 <a href="http://octopress.org" title="Octopress">octopress</a>的文档写得很清晰，但对于第一次接触这个博客系统的人来讲，还是有一些拦路虎的。2012年12月16日凌晨4:15，当我的第一篇空的博客展现在 <a href="tyrchen.github.com">tyrchen.github.com</a> 时，我终于累瘫在床上。</p>

<p>早上9时，我翻身起来撰写此文，算是给自己折腾的那一个多小时时间一个交代吧。</p>

<p>免责声明：如果你不知道什么是shell, github, 不能很快地掌握一种非常简单的标记语言(markdown)，那么本文不适合你。类似于 <a href="http://wordpress.com">wordpress</a> 所见即所得的博客系统对你更有价值。<a href="http://octopress.org" title="Octopress">octopress</a>适合于黑客。</p>

<!-- more -->


<h2>什么是github pages?</h2>

<p>开源项目需要sell自己。项目的介绍，帮助和API文档都是很好的宣传工具。在没有github pages的日子里，项目只能自建站点或者使用第三方来存放能让用户立即阅读的文档。github看到了这一需求，将一个静态页面hosting的系统巧妙地与github本身结合起来，通过一个特殊的branch (gh-pages) 为项目提供文档hosting。除此之外，个人也有branding自己的需求，于是，只要你创建一个名为 yourname.github.com 的repository，github会自动为其提供同域名的hosting服务。</p>

<p>更多有关github pages的文档，见：<a href="http://pages.github.com/">http://pages.github.com/</a>。</p>

<h2>为什么用github pages?</h2>

<p>用github pages搭建博客，你可以享受到免费的服务器，免费的流量和相对不错的服务体验。另外，这是一种搭建博客的全新体验，不用数据库，一切改动都由git追踪，随时随地查看你的博文历史，近乎0成本迁移到任意服务器。动心了么？读下去吧。</p>

<h2>什么是octopress?</h2>

<p>octopress提供了一组自动化的工具和模版帮助用户简化博客系统的创建。octopress生成的博客系统可以被方便地部署到github pages及heroku，当然，由于生成的是静态文件，你也可以将其部署到任何一个你自己的vhost或server。</p>

<p>octopress的安装文档见：<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>。本文接下来的部分会详细介绍如何用github pages和octopress部署一个自己的博客，及简单介绍如何进行写作。</p>

<h2>安装</h2>

<h3>创建repository</h3>

<p>在你的github账号下创建名为yourname.github.com的repository。注意，不要创建成yourname。创建好后留待后用。</p>

<h3>安装ruby 1.9.3</h3>

<p>如果你的系统中没有ruby或者 <code>ruby --version</code> 的版本不是1.9.3，请使用 <a href="https://rvm.io/rvm/install/">rvm</a> 或者你熟悉的version manager安装1.9.3.</p>

<p>使用rvm安装ruby 1.9.3:</p>

<p><code>
$ rvm install 1.9.3
$ rvm use 1.9.3
$ ruby --version
ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-darwin12.2.0]
</code></p>

<h3>设置octopress</h3>

<h4>安装依赖</h4>

<p><code>
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress    # 使用rvm时，系统会自动切换到1.9.3，第一次使用会提示是否trust .rvmrc，请输入yes
$ gem install bundler
$ bundle install
</code></p>

<p>如果在这一步有任何问题，请查阅ruby手册或google报错信息。</p>

<h4>安装缺省的模版</h4>

<p><code>
$ rake install
</code></p>

<h4>设置博客使用的repository</h4>

<p><code>
$ rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.com)
Repository url:
</code></p>

<p>请输入：<code>git@github.com:yourname/yourname.github.com.git</code> (将yourname替换成你的github登录名)</p>

<p>这个步骤rake会做很多事情：</p>

<ol>
<li>在.git/config中替换origin为你输入的repository，并把原来的origin写到octopress中。</li>
<li>创建新的branch source并切换到这个branch。</li>
<li>在生成的_deploy目录下，初始化git repository为你的repository。</li>
</ol>


<p>以下是两个git config的内容，just for your information。</p>

<p>```
tchen@tchen-mbp:~/projects/octopress$ cat .git/config
[core]</p>

<pre><code>repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
</code></pre>

<p>[remote &ldquo;octopress&rdquo;]</p>

<pre><code>url = git://github.com/imathis/octopress.git
fetch = +refs/heads/*:refs/remotes/octopress/*
</code></pre>

<p>[branch &ldquo;source&rdquo;]</p>

<pre><code>remote = origin
merge = refs/heads/master
rebase = true
</code></pre>

<p>[remote &ldquo;origin&rdquo;]</p>

<pre><code>url = git@github.com:tyrchen/tyrchen.github.com.git
fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>```</p>

<p>```
tchen@tchen-mbp:~/projects/octopress$ cat _deploy/.git/config
[core]</p>

<pre><code>repositoryformatversion = 0
filemode = true
bare = false
logallrefupdates = true
ignorecase = true
</code></pre>

<p>[remote &ldquo;origin&rdquo;]</p>

<pre><code>url = git@github.com:tyrchen/tyrchen.github.com.git
fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>```</p>

<h4>创建博文</h4>

<p>接下来可以试试创建一个新的博文：</p>

<p><code>
$ rake new_post["My first blog"]
</code></p>

<p>这会在source/_posts下创建一个以时间和标题为名称的markdown文件，它就是你的第一篇博文。</p>

<p>使用：</p>

<p><code>
$ rake preview
</code></p>

<p>rake会启动一个server，打开浏览器访问 <a href="http://localhost:4000">http://localhost:4000</a> 可以看到你的最新更改。</p>

<h4>部署你的博客</h4>

<p><code>
$ rake gen_deploy
</code></p>

<p>这个命令会把_deploy下的内容重新生成一遍，然后提交到你的repository。如果一切顺利，10分钟左右就可以通过 <a href="http://yourname.github.com">http://yourname.github.com</a> 访问你的博客了。</p>

<h4>保存你的更改</h4>

<p>欢喜之余，不要忘记提交你的源文件。</p>

<p><code>
$ git add .
$ git commit -m "Source code of my blog"
$ git push origin source
</code></p>

<p>你的repository会多一个source目录，记载所有的源文件。</p>

<h4>撰写博文</h4>

<p>博客系统搭建好之后，如何撰写博文呢？通过之前的步骤想必你对octopress的精髓有所了解，yes，没有所见即所得的编辑器让你撰写博文，你要做的是使用 <code>rake new_post</code> 命令创建一篇新的文章，然后使用称手的markdown编辑器进行编辑即可。可选择的markdown编辑器很多，vim，sublime text 2，textmate 2等等。我个人喜欢在osx下使用sublime text 2。（需要安装Markdown Edit，不会安装？？请google ^_^ ）</p>

<p>基本的语法我就不多说了，浪费篇幅。看看这篇博文的源文件，你就掌握了markdown的大部分用法。（如果你第一反应是 鼠标右键->查看源文件，那么我被你打败了，我说的是markdown的源文件 ^_^ ）</p>

<p>还是不知道怎么看？好吧，<a href="https://raw.github.com/tyrchen/tyrchen.github.com/source/source/_posts/2012-12-16-first-blog.markdown">猛击这个链接</a></p>

<h2>个性化</h2>

<h3>添加个人域名</h3>

<p>在octopress目录下：</p>

<p><code>
$ echo 'blog.yourdomain.com' &gt;&gt; source/CNAME
</code></p>

<p>然后在你的DNS服务商，如 <a href="http://dnspod.cn">dnspod.cn</a>，添加相应的CNAME指向 yourname.github.com。如果你要使用顶级域名，如 <code>http://yourdomain.com</code> 访问你的博客，则需要使用A记录指向 <code>207.97.227.245</code>。详细内容请参考：<a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a>。</p>

<h3>设置博客</h3>

<p>打开<code>_config.yml</code>，按照 <a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a> 的说明进行设置即可。注意把不需要的asides都删除，免得加载不必要的js，拖累访问速度。如果想把你自己的微博个人秀加在侧栏，请参考：<a href="http://clark1231.iteye.com/blog/1553939">http://clark1231.iteye.com/blog/1553939</a>。</p>

<h3>使用主题</h3>

<p>本文使用了 <a href="https://github.com/amelandri/darkstripes">https://github.com/amelandri/darkstripes</a> 的主题。使用方法很简单：</p>

<p><code>
$ cd octopress
$ git clone git://github.com/amelandri/darkstripes.git .themes/darkstripes
$ rake install['darkstripes']
$ rake generate
</code></p>

<p>注意你对已有主题的汉化会被覆盖，请确保提交所有更改前你merge了你的改动。</p>

<h3>添加多说</h3>

<p>由于github pages只支持静态文件，所以类似评论这样的功能就只能使用第三方工具。octopress自带disqus的评论系统，但其对国内用户不够友好，另外加载速度也不快。国内disqus的copycat是duoshuo，于是照猫画虎，添加多说的支持进来：</p>

<p>首先在 <code>source/post/</code> 下创建duoshuo.html:</p>

<p>
``` html duoshuo.html
{% if site.duoshuo_name %}</p>

<!-- Duoshuo Comment BEGIN -->


<pre><code>&lt;div class="ds-thread"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
var duoshuoQuery = {short_name:"{{ site.duoshuo_name }}"};
(function() {
    var ds = document.createElement('script');
    ds.type = 'text/javascript';ds.async = true;
    ds.src = 'http://static.duoshuo.com/embed.js';
    ds.charset = 'UTF-8';
    (document.getElementsByTagName('head')[0] 
    || document.getElementsByTagName('body')[0]).appendChild(ds);
})();
&lt;/script&gt;
</code></pre>

<!-- Duoshuo Comment END -->


<p>{% endif %}
```
</p>

<p>然后在 <code>source/_layouts/post.html</code>，将对应的disqus代码改为：</p>

<p>
``` html
{% if site.duoshuo_name and page.comments == true %}
  <section id="comment"></p>

<pre><code>&lt;h1&gt;发表评论&lt;/h1&gt;
{% include post/duoshuo.html %}
</code></pre>

<p>  </section>
{% endif %}
```
</p>

<p>在 <code>source/_config.yml</code> 里，添加：</p>

<p>``` yaml</p>

<h1>Duoshuo comments</h1>

<p>duoshuo_name: your_duoshuo_name
```</p>

<p>应该就可以了。可以使用如下命令测试：</p>

<p><code>
$ rake generate
$ rake preview
</code></p>

<h3>添加百度统计</h3>

<p>百度统计可以将生成的script直接添加到 <code>source/post/after_footer.html</code> 就可以。很简单，这里就不详述。</p>

<h3>更新中</h3>

<p>本博文会不断修改，不断更新。作者会尽量保持这篇博文和其使用的博客系统保持文档上的一致。</p>

<h2>后记</h2>

<p>断断续续写了两个小时，期间还哄了下满月的小宝，拍下了一堆她满月的照片，选一张出来，算是对你耐心读完本文的奖励：</p>

<p><img src="/images/photos/baby20121216.jpg"></p>
]]></content>
  </entry>
  
</feed>
